/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/categories": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.categories.id"];
          created_at?: parameters["rowFilter.categories.created_at"];
          updated_at?: parameters["rowFilter.categories.updated_at"];
          user_id?: parameters["rowFilter.categories.user_id"];
          name?: parameters["rowFilter.categories.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["categories"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** categories */
          categories?: definitions["categories"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.categories.id"];
          created_at?: parameters["rowFilter.categories.created_at"];
          updated_at?: parameters["rowFilter.categories.updated_at"];
          user_id?: parameters["rowFilter.categories.user_id"];
          name?: parameters["rowFilter.categories.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.categories.id"];
          created_at?: parameters["rowFilter.categories.created_at"];
          updated_at?: parameters["rowFilter.categories.updated_at"];
          user_id?: parameters["rowFilter.categories.user_id"];
          name?: parameters["rowFilter.categories.name"];
        };
        body: {
          /** categories */
          categories?: definitions["categories"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/follows": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.follows.id"];
          created_at?: parameters["rowFilter.follows.created_at"];
          updated_at?: parameters["rowFilter.follows.updated_at"];
          follower_id?: parameters["rowFilter.follows.follower_id"];
          followee_id?: parameters["rowFilter.follows.followee_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["follows"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** follows */
          follows?: definitions["follows"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.follows.id"];
          created_at?: parameters["rowFilter.follows.created_at"];
          updated_at?: parameters["rowFilter.follows.updated_at"];
          follower_id?: parameters["rowFilter.follows.follower_id"];
          followee_id?: parameters["rowFilter.follows.followee_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.follows.id"];
          created_at?: parameters["rowFilter.follows.created_at"];
          updated_at?: parameters["rowFilter.follows.updated_at"];
          follower_id?: parameters["rowFilter.follows.follower_id"];
          followee_id?: parameters["rowFilter.follows.followee_id"];
        };
        body: {
          /** follows */
          follows?: definitions["follows"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/posts": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.posts.id"];
          user_id?: parameters["rowFilter.posts.user_id"];
          type?: parameters["rowFilter.posts.type"];
          video_id?: parameters["rowFilter.posts.video_id"];
          title?: parameters["rowFilter.posts.title"];
          body?: parameters["rowFilter.posts.body"];
          created_at?: parameters["rowFilter.posts.created_at"];
          updated_at?: parameters["rowFilter.posts.updated_at"];
          thumbnail_url?: parameters["rowFilter.posts.thumbnail_url"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["posts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** posts */
          posts?: definitions["posts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.posts.id"];
          user_id?: parameters["rowFilter.posts.user_id"];
          type?: parameters["rowFilter.posts.type"];
          video_id?: parameters["rowFilter.posts.video_id"];
          title?: parameters["rowFilter.posts.title"];
          body?: parameters["rowFilter.posts.body"];
          created_at?: parameters["rowFilter.posts.created_at"];
          updated_at?: parameters["rowFilter.posts.updated_at"];
          thumbnail_url?: parameters["rowFilter.posts.thumbnail_url"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.posts.id"];
          user_id?: parameters["rowFilter.posts.user_id"];
          type?: parameters["rowFilter.posts.type"];
          video_id?: parameters["rowFilter.posts.video_id"];
          title?: parameters["rowFilter.posts.title"];
          body?: parameters["rowFilter.posts.body"];
          created_at?: parameters["rowFilter.posts.created_at"];
          updated_at?: parameters["rowFilter.posts.updated_at"];
          thumbnail_url?: parameters["rowFilter.posts.thumbnail_url"];
        };
        body: {
          /** posts */
          posts?: definitions["posts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/posts_categories": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.posts_categories.id"];
          created_at?: parameters["rowFilter.posts_categories.created_at"];
          updated_at?: parameters["rowFilter.posts_categories.updated_at"];
          category_id?: parameters["rowFilter.posts_categories.category_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["posts_categories"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** posts_categories */
          posts_categories?: definitions["posts_categories"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.posts_categories.id"];
          created_at?: parameters["rowFilter.posts_categories.created_at"];
          updated_at?: parameters["rowFilter.posts_categories.updated_at"];
          category_id?: parameters["rowFilter.posts_categories.category_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.posts_categories.id"];
          created_at?: parameters["rowFilter.posts_categories.created_at"];
          updated_at?: parameters["rowFilter.posts_categories.updated_at"];
          category_id?: parameters["rowFilter.posts_categories.category_id"];
        };
        body: {
          /** posts_categories */
          posts_categories?: definitions["posts_categories"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.users.user_id"];
          created_at?: parameters["rowFilter.users.created_at"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          display_name?: parameters["rowFilter.users.display_name"];
          /** twitter ID (screen name) */
          user_name?: parameters["rowFilter.users.user_name"];
          /** twitter photoURL */
          photo_url?: parameters["rowFilter.users.photo_url"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.users.user_id"];
          created_at?: parameters["rowFilter.users.created_at"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          display_name?: parameters["rowFilter.users.display_name"];
          /** twitter ID (screen name) */
          user_name?: parameters["rowFilter.users.user_name"];
          /** twitter photoURL */
          photo_url?: parameters["rowFilter.users.photo_url"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.users.user_id"];
          created_at?: parameters["rowFilter.users.created_at"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          display_name?: parameters["rowFilter.users.display_name"];
          /** twitter ID (screen name) */
          user_name?: parameters["rowFilter.users.user_name"];
          /** twitter photoURL */
          photo_url?: parameters["rowFilter.users.photo_url"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/handle_new_auth_user": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  categories: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at: string;
    updated_at: string;
    /**
     * Note:
     * This is a Foreign Key to `users.user_id`.<fk table='users' column='user_id'/>
     */
    user_id: string;
    name: string;
  };
  /** user relationships */
  follows: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at: string;
    updated_at: string;
    /**
     * Note:
     * This is a Foreign Key to `users.user_id`.<fk table='users' column='user_id'/>
     */
    follower_id: string;
    /**
     * Note:
     * This is a Foreign Key to `users.user_id`.<fk table='users' column='user_id'/>
     */
    followee_id: string;
  };
  posts: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Note:
     * This is a Foreign Key to `users.user_id`.<fk table='users' column='user_id'/>
     */
    user_id: string;
    type: string;
    video_id: string;
    title: string;
    body?: string;
    created_at: string;
    updated_at: string;
    thumbnail_url?: string;
  };
  /** relationship between posts and categories */
  posts_categories: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at: string;
    updated_at: string;
    /**
     * Note:
     * This is a Foreign Key to `categories.id`.<fk table='categories' column='id'/>
     */
    category_id: number;
  };
  users: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    user_id: string;
    created_at: string;
    updated_at: string;
    display_name?: string;
    /** twitter ID (screen name) */
    user_name: string;
    /** twitter photoURL */
    photo_url?: string;
  };
}

export interface parameters {
  /** Preference */
  preferParams: "params=single-object";
  /** Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** Preference */
  preferCount: "count=none";
  /** Filtering Columns */
  select: string;
  /** On Conflict */
  on_conflict: string;
  /** Ordering */
  order: string;
  /** Limiting and Pagination */
  range: string;
  /** Limiting and Pagination */
  rangeUnit: string;
  /** Limiting and Pagination */
  offset: string;
  /** Limiting and Pagination */
  limit: string;
  /** categories */
  "body.categories": definitions["categories"];
  "rowFilter.categories.id": string;
  "rowFilter.categories.created_at": string;
  "rowFilter.categories.updated_at": string;
  "rowFilter.categories.user_id": string;
  "rowFilter.categories.name": string;
  /** follows */
  "body.follows": definitions["follows"];
  "rowFilter.follows.id": string;
  "rowFilter.follows.created_at": string;
  "rowFilter.follows.updated_at": string;
  "rowFilter.follows.follower_id": string;
  "rowFilter.follows.followee_id": string;
  /** posts */
  "body.posts": definitions["posts"];
  "rowFilter.posts.id": string;
  "rowFilter.posts.user_id": string;
  "rowFilter.posts.type": string;
  "rowFilter.posts.video_id": string;
  "rowFilter.posts.title": string;
  "rowFilter.posts.body": string;
  "rowFilter.posts.created_at": string;
  "rowFilter.posts.updated_at": string;
  "rowFilter.posts.thumbnail_url": string;
  /** posts_categories */
  "body.posts_categories": definitions["posts_categories"];
  "rowFilter.posts_categories.id": string;
  "rowFilter.posts_categories.created_at": string;
  "rowFilter.posts_categories.updated_at": string;
  "rowFilter.posts_categories.category_id": string;
  /** users */
  "body.users": definitions["users"];
  "rowFilter.users.user_id": string;
  "rowFilter.users.created_at": string;
  "rowFilter.users.updated_at": string;
  "rowFilter.users.display_name": string;
  /** twitter ID (screen name) */
  "rowFilter.users.user_name": string;
  /** twitter photoURL */
  "rowFilter.users.photo_url": string;
}

export interface operations {}

export interface external {}
